#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ./wallpaperoptimizer  ../2560x1920.jpg ../1500x844.jpg -w

import sys
import os.path
import time
import commands
import logging
import subprocess

def ConfigSetToWorkSpace():
	logging.debug('Config Setting To WorkSpace().')

	Ws.lScreen.setSize(Config.lDisplay.getConfig()['width']
		, Config.lDisplay.getConfig()['height'])
	Ws.rScreen.setSize(Config.rDisplay.getConfig()['width']
		, Config.rDisplay.getConfig()['height'])

	if ( Ws.Size.w < (Ws.lScreen.Size.w + Ws.rScreen.Size.w) ):
		# TODO: Errorクラス
		# ほぼ設定ミスのルート
		logging.error(
		'** Workspace width[%d] < sum(left display size, right display size) [%d, %d].'
		 % ( Ws.Size.w, Ws.lScreen.Size.w, Ws.rScreen.Size.w ))
		sys.exit(2)
	if ( Ws.Size.h > Ws.lScreen.Size.h ):
		setattr(Ws.lScreen.Size, 'islessThanWorkSpaceHeight', True)
	elif ( Ws.Size.h > Ws.rScreen.Size.h ):
		setattr(Ws.rScreen.Size, 'islessThanWorkSpaceHeight', True)
	else:
		pass

	if ( Ws.lScreen.isSquare() ):
		setattr(Ws.lScreen, 'displayType', 'square')
	if ( Ws.lScreen.isWide() ):
		setattr(Ws.lScreen, 'displayType', 'wide')

	if ( Ws.rScreen.isSquare() ):
		setattr(Ws.rScreen, 'displayType', 'square')
	if ( Ws.rScreen.isWide() ):
		setattr(Ws.rScreen, 'displayType', 'wide')

	if (hasattr(Ws.lScreen.Size, 'islessThanWorkSpaceHeight')
	 and Ws.lScreen.Size.islessThanWorkSpaceHeight):
		logging.warning(
			'* Workspace height [%s] > left display height [%s].'
			 % (Ws.Size.h, Ws.lScreen.Size.h ))
	if (hasattr(Ws.rScreen.Size, 'islessThanWorkSpaceHeight')
	 and Ws.rScreen.Size.islessThanWorkSpaceHeight):
		logging.warning(
			'* Workspace height [%s] > right display height [%s].'
			 % (Ws.Size.h, Ws.rScreen.Size.h ))

	logging.debug('%20s [%s,%s]'
		 	 % ( 'display type' , Ws.lScreen.displayType, Ws.rScreen.displayType ))

	return Ws


if __name__ == "__main__":
	from WallpaperOptimizer.WoOption import WoOption
	from WallpaperOptimizer.WoConfig import WoConfig
	from WallpaperOptimizer.WoCore import WoCore
	from WallpaperOptimizer.WoApplet import WoApplet
	from WallpaperOptimizer.Imaging.WoWorkSpace import WoWorkSpace

# analize commandline option
	Option = WoOption()
	Verbose = Option.getVerbose()

	if (Verbose):
		loglevel = logging.DEBUG
	else:
		loglevel = logging.INFO

	logging.basicConfig(level=loglevel
						, format='%(asctime)s %(levelname)5s %(message)s'
						, filename='/tmp/wallposit.log'
						, filemode='w')
	logging.info('Starting ... wallpaperoptimizer.')

	if (Verbose):
		console = logging.StreamHandler()
		console.setLevel(logging.DEBUG)
		formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')
		console.setFormatter(formatter)
		logging.getLogger('').addHandler(console)


	logging.debug('Command line option as.')
	logging.debug('%20s [%s,%s].'
		 % ( 'align', Option.getLAlign(), Option.getRAlign() ))
	logging.debug('%20s [%s,%s].'
		 % ( 'valign', Option.getLValign(), Option.getRValign() ))
	logging.debug('%20s [%d,%d,%d,%d]'
		 % ( 'mergin'
		 , Option.getLMergin(), Option.getRMergin()
		 , Option.getTopMergin(), Option.getBtmMergin() ))
	logging.debug('%20s [%s]'
		 % ( 'fixed', Option.getFixed() ))
	logging.debug('%20s [%s,%s]'
		 % ( 'display', Option.getLSize(), Option.getRSize() ))
	logging.debug('%20s [%s]'
		 % ( 'bgcolor', Option.getBgcolor() ))
	logging.debug('%20s [%s,%s]'
		 % ( 'srcdir', Option.getLSrcdir(), Option.getRSrcdir() ))
	logging.debug('%20s [%s]'
		 % ( 'setWall', Option.getSetWall() ))
	logging.debug('%20s [%s]'
		 % ( 'savepath', Option.getSavePath() ))
	logging.debug('%20s [%s]'
		 % ( 'daemon', Option.getDaemonize() ))
	logging.debug('%20s [%s]'
		 % ( 'interval', Option.getInterval() ))


# initialize workspace
	Ws = WoWorkSpace()
	logging.debug('Current WorkSpace setting as.')
	logging.debug('%20s [%d,%d]'
		 % ( 'WorkSpace Size', Ws.getSize().w, Ws.getSize().h ))
	logging.debug('%20s [%s]'
		 % ( 'WorkSpace depth', Ws.depth ))


# initialize config
	# 条件弱い？
	if (Option.getLSize() == None and Option.getRSize() == None):
		# config set from configfile
		configfile = '~/.wallpositrc'
		configfile = os.path.expanduser(configfile)
		if (os.path.exists(configfile)):
			Config = WoConfig(configfile, None, None)
			logging.debug('Load configfile [%s].' % configfile)
		else:
			logging.error('** Not exists configfile [%s]. ' % configfile)
			sys.exit(2)
		logging.debug('Config set from configfile.')
	else:
		# config set from commandline option
		Config = WoConfig(None
				, Option.getLSize()
				, Option.getRSize()
				, [Option.getLSrcdir(), Option.getRSrcdir()])
		logging.debug('Config set from commandline option.')

	logging.debug('%20s [%s,%s]'
			 % ( 'left display size'
			 , Config.lDisplay.getConfig()['width'], Config.rDisplay.getConfig()['width'] ))
	logging.debug('%20s [%s,%s]'
			 % ( 'right display size'
			 , Config.lDisplay.getConfig()['height'], Config.rDisplay.getConfig()['height'] ))
	logging.debug('%20s [%s,%s]'
			 % ( 'position'
			 , Config.lDisplay.getConfig()['posit'], Config.rDisplay.getConfig()['posit'] ))
	logging.debug('%20s [%s]'
			 % ( 'srcdir to left'
			 , Config.lDisplay.getConfig()['srcdir'] ))
	logging.debug('%20s [%s]'
			 % ( 'srcdir to right'
			 , Config.rDisplay.getConfig()['srcdir'] ))


	Ws = ConfigSetToWorkSpace()

	if (Option.getSetWall() == False
		 and Option.getSavePath() == None
		 and Option.getDaemonize() == False):
		logging.debug('Running ... applet mode.')
		Applet = WoApplet(Option, Config, Ws, logging)
		Applet.finalize()
	elif (Option.getDaemonize()):
		Core = WoCore(logging)
		logging.debug('Running ... daemonize mode.')
		Core.background(Option, Config, Ws)
	else:
		Core = WoCore(logging)
		logging.debug('Running ... singlerun mode.')
		Core.singlerun(Option, Config, Ws)

	logging.debug('Quit ... wallpaperoptimizer.')
	sys.exit(0)
